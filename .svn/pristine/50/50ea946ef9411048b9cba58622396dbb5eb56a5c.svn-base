package dev.procheck.offshore.stock.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import dev.procheck.offshore.stock.models.Carton;

public class Methods {

	@SuppressWarnings("null")
	public static List<Carton> dataCarton(XSSFSheet sheet) {
		List<Carton> cartons = new ArrayList<Carton>();
		Carton carton = new Carton();
		Iterator<Row> itr = sheet.iterator();
		String typeContrat = "";
		String numCarton = "";
		String dateCaractirisation = "";
		String status = null;
		int i = 0;
		try {
			while (itr.hasNext()) {
				Row row = itr.next();
				XSSFCell numC = (XSSFCell) row.getCell(0);
				XSSFCell dateC = (XSSFCell) row.getCell(14);
				XSSFCell typeC = (XSSFCell) row.getCell(23);
				if (row.getCell(0).getStringCellValue().equals("CARTON_EXPEDITION")) {
					status = "pret";
					continue;
				}
				if (status == "pret") {
					if (checkCellString(numC)) {
						numCarton = numC.getStringCellValue();
						System.out.println("num carton : " + numC.getStringCellValue());
						dateCaractirisation = dateC.getStringCellValue();
						System.out.println("date cara : " + dateC.getStringCellValue());
						typeContrat = typeC.getStringCellValue();
						System.out.println("type carton : " + typeC.getStringCellValue());
						Date DateC = new SimpleDateFormat("dd/MM/yyyy").parse(dateCaractirisation);
						carton = new Carton();
						carton.setNumero(numCarton);
						carton.setTypeCarton(typeContrat);
						carton.setDateCaractirisation(DateC);
						cartons.add(carton);
					}

				}

			}
		} catch (Exception ex) {
			System.out.println("Erreur : " + ex);
		}

		return cartons;
	}

	public static Properties loadFileInit() {
		Properties configProp = new Properties();
		try {
			String settingsPropertyFile = Methods.class.getResource("/Config.properties").getFile();
			FileReader fReader = new FileReader(settingsPropertyFile);
			configProp.load(fReader);
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		return configProp;
	}

	public static XSSFSheet getSheetFromFile(File file, String name) throws IOException {
		try {
			FileInputStream fileExcel = new FileInputStream(file);
			@SuppressWarnings("resource")
			XSSFWorkbook wb = new XSSFWorkbook(fileExcel);
			XSSFSheet sheet = wb.getSheet(name);
			return sheet;
		} catch (Exception ex) {
			System.out.println("Erreur : " + ex);
		}

		return null;
	}

	public static boolean checkCellString(Cell cell) {
		try {

			cell.getStringCellValue();
			return true;
		} catch (Exception ex) {
			return false;
		}
	}

	public static boolean checkCellDate(Cell cell) {
		try {

			cell.getDateCellValue();
			return true;
		} catch (Exception ex) {
			return false;
		}
	}

	public static boolean checkCellDoule(Cell cell) {
		try {

			cell.getNumericCellValue();
			return true;
		} catch (Exception ex) {
			return false;
		}
	}
}
